<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="CommentMapper">

	<!-- Beans 클래스의 객체이름(id)과 클래스이름(type)을 명시한다. -->
	<resultMap id="CommentMap"
		type="pocketLib.spring.pocketLibSpring.mybatis.model.Comment">
		<!-- Beans의 멤버변수(property)이름과 대상 테이블의 컬럼(column)을 연결한다. -->
		<result property="cmtNo" column="cmtNo" />
		<result property="boardNo" column="boardNo" />
		<result property="userNo" column="userNo" />
		<result property="userId" column="userId" />
		<result property="cmt_content" column="cmt_content" />
		<result property="cmt_reg_date" column="cmt_reg_date" />
		<result property="cmt_love" column="cmt_love" />
		<result property="cmt_hate" column="cmt_hate" />
		<result property="ccmt_exist" column="ccmt_exist" />
		<result property="ccmt_ref" column="ccmt_ref" />
	</resultMap>

	<!-- 단일행 조회를 위한 기능 정의 -->
	<select id="selectItem"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment"
		resultMap="CommentMap">
		<!-- "#{변수명}" 으로 표시된 곳에 멤버변수가 치환된다. -->
		SELECT cmtNo, boardNo, userNo, userId, cmt_content, cmt_reg_date
		,cmt_love, cmt_hate
		FROM Comment WHERE cmtNo=#{cmtNo};
	</select>

	<select id="selectList"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment"
		resultMap="CommentMap">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT cmtNo, boardNo, userNo, userId, cmt_content, cmt_reg_date
		,cmt_love, cmt_hate, ccmt_exist, ccmt_ref FROM Comment
		where boardNo= #{boardNo} order by ccmt_ref;

		<if test="listCount >0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>
	
	<select id="ccmtselectList"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment"
		resultMap="CommentMap">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT cmtNo, boardNo, userNo, userId, cmt_content, cmt_reg_date
		,cmt_love, cmt_hate, ccmt_exist, ccmt_ref FROM Comment
		where boardNo= #{boardNo} and ccmt_ref= #{cmtNo}

		<if test="listCount >0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<select id="selectOptionList2"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment"
		resultMap="CommentMap">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT boardNo,title,content,userId,reg_date,hits,boardCate FROM
		Comment
		<where>
			<if test="true">
				boardCate = #{boardCate}
			</if>
			<if test="title != null and title !=''">
				AND title LIKE concat('%', #{title}, '%')
			</if>

			<if test="sortCate == 'order' or sortCate == null or sortCate==''">
				order by boardNo DESC
			</if>
			<if test="sortCate == 'reg_date'">
				order by reg_date DESC
			</if>
			<if test="sortCate == 'hits'">
				order by hits DESC
			</if>

		</where>
		<if test="listCount >0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>

	<select id="selectOptionList3"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment"
		resultMap="CommentMap">
		<!-- 이 안에서 처리할 SQL문을 명시한다. -->
		SELECT boardNo,title,content,userId,reg_date,hits,boardCate FROM
		Comment
		<where>
			<if test="true">
				boardCate = #{boardCate}
			</if>
			<if test="userId != null and userId !=''">
				AND userId LIKE concat('%', #{userId}, '%')
			</if>
			<if
				test="sortCate == 'order' or (sortCate == null or sortCate=='')">
				order by boardNo DESC
			</if>
			<if test="sortCate == 'reg_date'">
				order by reg_date DESC
			</if>
			<if test="sortCate == 'hits'">
				order by hits DESC
			</if>
		</where>
		<if test="listCount >0">
			LIMIT #{offset}, #{listCount}
		</if>
	</select>
	<!-- 데이터 수 조회를 위한 기능 정의 -->

	<select id="selectOptionCount1"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment" resultType="int">
		SELECT COUNT(*) FROM Comment
		<where>
			<if test="true">
				boardCate = #{boardCate}
			</if>
			<if test="title != null and title !=''">
				AND (title LIKE concat('%', #{title}, '%')
			</if>
			<if test="content != null and title !=''">
				OR content LIKE concat('%', #{content}, '%'))
			</if>

		</where>
	</select>

	<select id="selectOptionCount2"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment" resultType="int">
		SELECT COUNT(*) FROM Comment
		<where>
			<if test="true">
				boardCate = #{boardCate}
			</if>
			<if test="title != null and title !=''">
				AND title LIKE concat('%', #{title}, '%')
			</if>

		</where>
	</select>

	<select id="selectOptionCount3"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment" resultType="int">
		SELECT COUNT(*) FROM Comment
		<where>
			<if test="true">
				boardCate = #{boardCate}
			</if>
			<if test="userId != null and userId !=''">
				AND userId LIKE concat('%', #{userId}, '%')
			</if>
		</where>
	</select>

	<!-- 데이터 저장을 위한 기능 정의 -->
	<insert id="insertItem"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment"
		useGeneratedKeys="true" keyProperty="cmtNo">
		INSERT INTO Comment
		(
		boardNo, userNo, userId, cmt_content, cmt_reg_date ,cmt_love,
		cmt_hate, ccmt_exist, ccmt_ref)
		VALUES
		(#{boardNo},#{userNo},
		#{userId}, #{cmt_content}, #{cmt_reg_date}, #{cmt_love},
		#{cmt_hate}, #{ccmt_exist}, #{ccmt_ref});
	</insert>

	<!-- 데이터 삭제를 위한 기능 정의 -->
	<delete id="deleteItem"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment">
		DELETE FROM Comment WHERE cmtNo=#{cmtNo} or ccmt_ref=#{cmtNo};
	</delete>
	
	<delete id="deleteItem2"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment">
		DELETE FROM Comment WHERE cmtNo=#{cmtNo};
	</delete>

	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment">
		UPDATE Comment SET cmt_content = #{cmt_content},
		cmt_reg_date = #{cmt_reg_date} where cmtNo = #{cmtNo};
	</update>
	
	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem2"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment">
		UPDATE Comment SET ccmt_exist = 1 where cmtNo = #{cmtNo};
	</update>
	
	
	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateItem3"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment">
		UPDATE Comment SET ccmt_ref = #{cmtNo}
		 where cmtNo = #{cmtNo};
	</update>

	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updateloveCount"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment">
		UPDATE Comment SET cmt_love = cmt_love+1 where cmtNo =
		#{cmtNo};
	</update>



	<!-- 데이터 갱신을 위한 기능 정의 -->
	<update id="updatehateCount"
		parameterType="pocketLib.spring.pocketLibSpring.mybatis.model.Comment">
		UPDATE Comment SET cmt_hate = cmt_hate+1 where cmtNo =
		#{cmtNo};
	</update>
</mapper>